from aiogram.types import CallbackQuery, Message

import logging

from data.config import admins
from loader import dp, bot
from utils.db_api.db import Db
from utils.qiwi_api import qiwi
from utils.stateMachine import StateMachine
from keyboards.inline.inline_keyboard import check_status_pay, approve_pay


# –î–µ–ø–æ–∑–∏—Ç
@dp.callback_query_handler(lambda c: c.data == 'withdraw', state='*')
async def process_callback_buttonWithdraw(callback_query: CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)
    await state.set_state(StateMachine.all()[2])

    try:
        await bot.answer_callback_query(callback_query.id)
    except:
        pass

    await bot.send_message(callback_query.from_user.id, f'''üíµ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –Ω–∞ "QIWI" - 1 ‚ÇΩ</b>
<i>* –í—ã–≤–æ–¥ –Ω–∞ "QIWI" –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π</i>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ "QIWI" –≤ —á–∞—Ç:
''')

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)


@dp.message_handler(state=StateMachine.STATE_2)
async def getNumberFromUser(message: Message):
    db = Db()
    number = message.text

    try:
        if number.isdigit():
            db.updateWaitingNumber(message.from_user.id, number)

            await bot.send_message(message.from_user.id, f'''üí¨ <b>–í–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:</b>''')

            state = dp.current_state(user=message.from_user.id)
            await state.set_state(StateMachine.all()[3])
    except:
        pass


@dp.message_handler(state=StateMachine.STATE_3)
async def getAmountFromUser(message: Message):
    amount = message.text
    db = Db()
    print(1)
    data = db.getOneRecord(message.from_user.id)
    waiting_number = str(data[10])
    balance = data[1]

    try:
        if amount.isdigit():
            amount = int(amount)

            if amount <= balance:
                db.updateWaitingAmount(amount, message.from_user.id)
                #qiwi.send_pay(amount, waiting_number)
                await bot.send_message(message.from_user.id, '''<b>üèß –í–∞—à–∞ –∑–∞—è–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ</b>
                
üö® –û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç.''', reply_markup=None)

                for admin in admins:
                    try:
                        await dp.bot.send_message(admin, f'''üí∏ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥

<b>ID:</b> <i>{message.from_user.id}</i>
<b>Username:</b> <i>@{message.from_user.username}</i>
<b>–ö–æ—à–µ–ª–µ–∫:</b> <i>{waiting_number}</i>
<b>–°—É–º–º–∞:</b> <i>{amount}</i>''', reply_markup=approve_pay)

                    except Exception as err:
                        logging.exception(err)

            elif amount < 1:
                db.updateBillId(0, message.from_user.id)
                await bot.send_message(message.from_user.id, '''‚ùóÔ∏è <b>–ú–∏–Ω. —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ —Ä–∞–≤–Ω–∞ 1 —Ä—É–±.</b>''')
        
        else:
            db.updateBillId(0, message.from_user.id)
            await bot.send_message(message.from_user.id, '''‚ùóÔ∏è <b>–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>''')

        state = dp.current_state(user=message.from_user.id)
        await state.set_state(StateMachine.all()[0])
    
    except:
        pass
